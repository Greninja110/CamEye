package com.example.cameye.data.model

import kotlinx.serialization.Serializable

@Serializable // Make it serializable using kotlinx.serialization
data class ArDataPacket(
    val timestampNanos: Long,         // ARCore frame timestamp
    val sequence: Long,               // Simple sequence number
    val cameraPoseTranslation: List<Float>, // [x, y, z]
    val cameraPoseRotation: List<Float>,    // [qx, qy, qz, qw] quaternion
    val depthWidth: Int? = null,            // Width of the depth map, if available
    val depthHeight: Int? = null,           // Height of the depth map, if available
    val depthDataCompressed: ByteArray? = null // Compressed depth data (e.g., gzipped ShortArray bytes, PNG)
    // Null if depth not included or not available
) {
    // Add equals/hashCode if storing in sets/maps, generated by data class is usually fine
    override fun equals(other: Any?): Boolean {
        if (this === other) return true
        if (javaClass != other?.javaClass) return false

        other as ArDataPacket

        if (timestampNanos != other.timestampNanos) return false
        if (sequence != other.sequence) return false
        if (cameraPoseTranslation != other.cameraPoseTranslation) return false
        if (cameraPoseRotation != other.cameraPoseRotation) return false
        if (depthWidth != other.depthWidth) return false
        if (depthHeight != other.depthHeight) return false
        if (depthDataCompressed != null) {
            if (other.depthDataCompressed == null) return false
            if (!depthDataCompressed.contentEquals(other.depthDataCompressed)) return false
        } else if (other.depthDataCompressed != null) return false

        return true
    }

    override fun hashCode(): Int {
        var result = timestampNanos.hashCode()
        result = 31 * result + sequence.hashCode()
        result = 31 * result + cameraPoseTranslation.hashCode()
        result = 31 * result + cameraPoseRotation.hashCode()
        result = 31 * result + (depthWidth ?: 0)
        result = 31 * result + (depthHeight ?: 0)
        result = 31 * result + (depthDataCompressed?.contentHashCode() ?: 0)
        return result
    }
}